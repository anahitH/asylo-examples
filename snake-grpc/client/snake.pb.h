// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: snake.proto

#ifndef PROTOBUF_INCLUDED_snake_2eproto
#define PROTOBUF_INCLUDED_snake_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3006001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_snake_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_snake_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_snake_2eproto();
namespace examples {
namespace grpc_server {
class EnclaveInput;
class EnclaveInputDefaultTypeInternal;
extern EnclaveInputDefaultTypeInternal _EnclaveInput_default_instance_;
class EnclaveOutput;
class EnclaveOutputDefaultTypeInternal;
extern EnclaveOutputDefaultTypeInternal _EnclaveOutput_default_instance_;
class ReturnValue;
class ReturnValueDefaultTypeInternal;
extern ReturnValueDefaultTypeInternal _ReturnValue_default_instance_;
class Screen;
class ScreenDefaultTypeInternal;
extern ScreenDefaultTypeInternal _Screen_default_instance_;
class Screen_cell;
class Screen_cellDefaultTypeInternal;
extern Screen_cellDefaultTypeInternal _Screen_cell_default_instance_;
class Snake;
class SnakeDefaultTypeInternal;
extern SnakeDefaultTypeInternal _Snake_default_instance_;
class SnakeSegment;
class SnakeSegmentDefaultTypeInternal;
extern SnakeSegmentDefaultTypeInternal _SnakeSegment_default_instance_;
}  // namespace grpc_server
}  // namespace examples
namespace google {
namespace protobuf {
template<> ::examples::grpc_server::EnclaveInput* Arena::CreateMaybeMessage<::examples::grpc_server::EnclaveInput>(Arena*);
template<> ::examples::grpc_server::EnclaveOutput* Arena::CreateMaybeMessage<::examples::grpc_server::EnclaveOutput>(Arena*);
template<> ::examples::grpc_server::ReturnValue* Arena::CreateMaybeMessage<::examples::grpc_server::ReturnValue>(Arena*);
template<> ::examples::grpc_server::Screen* Arena::CreateMaybeMessage<::examples::grpc_server::Screen>(Arena*);
template<> ::examples::grpc_server::Screen_cell* Arena::CreateMaybeMessage<::examples::grpc_server::Screen_cell>(Arena*);
template<> ::examples::grpc_server::Snake* Arena::CreateMaybeMessage<::examples::grpc_server::Snake>(Arena*);
template<> ::examples::grpc_server::SnakeSegment* Arena::CreateMaybeMessage<::examples::grpc_server::SnakeSegment>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace examples {
namespace grpc_server {

enum Snake_direction_t {
  Snake_direction_t_LEFT = 0,
  Snake_direction_t_RIGHT = 1,
  Snake_direction_t_UP = 2,
  Snake_direction_t_DOWN = 3,
  Snake_direction_t_LEFT_TURN = 4,
  Snake_direction_t_RIGHT_TURN = 5,
  Snake_direction_t_QUIT = 6,
  Snake_direction_t_NUM_KEYS = 7,
  Snake_direction_t_Snake_direction_t_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  Snake_direction_t_Snake_direction_t_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool Snake_direction_t_IsValid(int value);
const Snake_direction_t Snake_direction_t_direction_t_MIN = Snake_direction_t_LEFT;
const Snake_direction_t Snake_direction_t_direction_t_MAX = Snake_direction_t_NUM_KEYS;
const int Snake_direction_t_direction_t_ARRAYSIZE = Snake_direction_t_direction_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* Snake_direction_t_descriptor();
inline const ::std::string& Snake_direction_t_Name(Snake_direction_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    Snake_direction_t_descriptor(), value);
}
inline bool Snake_direction_t_Parse(
    const ::std::string& name, Snake_direction_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Snake_direction_t>(
    Snake_direction_t_descriptor(), name, value);
}
// ===================================================================

class ReturnValue : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:examples.grpc_server.ReturnValue) */ {
 public:
  ReturnValue();
  virtual ~ReturnValue();

  ReturnValue(const ReturnValue& from);

  inline ReturnValue& operator=(const ReturnValue& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReturnValue(ReturnValue&& from) noexcept
    : ReturnValue() {
    *this = ::std::move(from);
  }

  inline ReturnValue& operator=(ReturnValue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ReturnValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReturnValue* internal_default_instance() {
    return reinterpret_cast<const ReturnValue*>(
               &_ReturnValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ReturnValue* other);
  friend void swap(ReturnValue& a, ReturnValue& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReturnValue* New() const final {
    return CreateMaybeMessage<ReturnValue>(nullptr);
  }

  ReturnValue* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReturnValue>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReturnValue& from);
  void MergeFrom(const ReturnValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReturnValue* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 eat_gold = 1;
  void clear_eat_gold();
  static const int kEatGoldFieldNumber = 1;
  ::google::protobuf::int32 eat_gold() const;
  void set_eat_gold(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:examples.grpc_server.ReturnValue)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 eat_gold_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_snake_2eproto;
};
// -------------------------------------------------------------------

class SnakeSegment : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:examples.grpc_server.SnakeSegment) */ {
 public:
  SnakeSegment();
  virtual ~SnakeSegment();

  SnakeSegment(const SnakeSegment& from);

  inline SnakeSegment& operator=(const SnakeSegment& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SnakeSegment(SnakeSegment&& from) noexcept
    : SnakeSegment() {
    *this = ::std::move(from);
  }

  inline SnakeSegment& operator=(SnakeSegment&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SnakeSegment& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SnakeSegment* internal_default_instance() {
    return reinterpret_cast<const SnakeSegment*>(
               &_SnakeSegment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(SnakeSegment* other);
  friend void swap(SnakeSegment& a, SnakeSegment& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SnakeSegment* New() const final {
    return CreateMaybeMessage<SnakeSegment>(nullptr);
  }

  SnakeSegment* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SnakeSegment>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SnakeSegment& from);
  void MergeFrom(const SnakeSegment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SnakeSegment* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 row = 1;
  void clear_row();
  static const int kRowFieldNumber = 1;
  ::google::protobuf::int32 row() const;
  void set_row(::google::protobuf::int32 value);

  // int32 col = 2;
  void clear_col();
  static const int kColFieldNumber = 2;
  ::google::protobuf::int32 col() const;
  void set_col(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:examples.grpc_server.SnakeSegment)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 row_;
  ::google::protobuf::int32 col_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_snake_2eproto;
};
// -------------------------------------------------------------------

class Snake : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:examples.grpc_server.Snake) */ {
 public:
  Snake();
  virtual ~Snake();

  Snake(const Snake& from);

  inline Snake& operator=(const Snake& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Snake(Snake&& from) noexcept
    : Snake() {
    *this = ::std::move(from);
  }

  inline Snake& operator=(Snake&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Snake& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Snake* internal_default_instance() {
    return reinterpret_cast<const Snake*>(
               &_Snake_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Snake* other);
  friend void swap(Snake& a, Snake& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Snake* New() const final {
    return CreateMaybeMessage<Snake>(nullptr);
  }

  Snake* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Snake>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Snake& from);
  void MergeFrom(const Snake& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Snake* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Snake_direction_t direction_t;
  static const direction_t LEFT =
    Snake_direction_t_LEFT;
  static const direction_t RIGHT =
    Snake_direction_t_RIGHT;
  static const direction_t UP =
    Snake_direction_t_UP;
  static const direction_t DOWN =
    Snake_direction_t_DOWN;
  static const direction_t LEFT_TURN =
    Snake_direction_t_LEFT_TURN;
  static const direction_t RIGHT_TURN =
    Snake_direction_t_RIGHT_TURN;
  static const direction_t QUIT =
    Snake_direction_t_QUIT;
  static const direction_t NUM_KEYS =
    Snake_direction_t_NUM_KEYS;
  static inline bool direction_t_IsValid(int value) {
    return Snake_direction_t_IsValid(value);
  }
  static const direction_t direction_t_MIN =
    Snake_direction_t_direction_t_MIN;
  static const direction_t direction_t_MAX =
    Snake_direction_t_direction_t_MAX;
  static const int direction_t_ARRAYSIZE =
    Snake_direction_t_direction_t_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  direction_t_descriptor() {
    return Snake_direction_t_descriptor();
  }
  static inline const ::std::string& direction_t_Name(direction_t value) {
    return Snake_direction_t_Name(value);
  }
  static inline bool direction_t_Parse(const ::std::string& name,
      direction_t* value) {
    return Snake_direction_t_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .examples.grpc_server.SnakeSegment body = 4;
  int body_size() const;
  void clear_body();
  static const int kBodyFieldNumber = 4;
  ::examples::grpc_server::SnakeSegment* mutable_body(int index);
  ::google::protobuf::RepeatedPtrField< ::examples::grpc_server::SnakeSegment >*
      mutable_body();
  const ::examples::grpc_server::SnakeSegment& body(int index) const;
  ::examples::grpc_server::SnakeSegment* add_body();
  const ::google::protobuf::RepeatedPtrField< ::examples::grpc_server::SnakeSegment >&
      body() const;

  // uint32 speed = 1;
  void clear_speed();
  static const int kSpeedFieldNumber = 1;
  ::google::protobuf::uint32 speed() const;
  void set_speed(::google::protobuf::uint32 value);

  // .examples.grpc_server.Snake.direction_t direction = 2;
  void clear_direction();
  static const int kDirectionFieldNumber = 2;
  ::examples::grpc_server::Snake_direction_t direction() const;
  void set_direction(::examples::grpc_server::Snake_direction_t value);

  // int32 len = 3;
  void clear_len();
  static const int kLenFieldNumber = 3;
  ::google::protobuf::int32 len() const;
  void set_len(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:examples.grpc_server.Snake)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::examples::grpc_server::SnakeSegment > body_;
  ::google::protobuf::uint32 speed_;
  int direction_;
  ::google::protobuf::int32 len_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_snake_2eproto;
};
// -------------------------------------------------------------------

class Screen_cell : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:examples.grpc_server.Screen.cell) */ {
 public:
  Screen_cell();
  virtual ~Screen_cell();

  Screen_cell(const Screen_cell& from);

  inline Screen_cell& operator=(const Screen_cell& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Screen_cell(Screen_cell&& from) noexcept
    : Screen_cell() {
    *this = ::std::move(from);
  }

  inline Screen_cell& operator=(Screen_cell&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Screen_cell& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Screen_cell* internal_default_instance() {
    return reinterpret_cast<const Screen_cell*>(
               &_Screen_cell_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Screen_cell* other);
  friend void swap(Screen_cell& a, Screen_cell& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Screen_cell* New() const final {
    return CreateMaybeMessage<Screen_cell>(nullptr);
  }

  Screen_cell* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Screen_cell>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Screen_cell& from);
  void MergeFrom(const Screen_cell& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Screen_cell* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 cell = 1;
  int cell_size() const;
  void clear_cell();
  static const int kCellFieldNumber = 1;
  ::google::protobuf::int32 cell(int index) const;
  void set_cell(int index, ::google::protobuf::int32 value);
  void add_cell(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      cell() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_cell();

  // @@protoc_insertion_point(class_scope:examples.grpc_server.Screen.cell)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > cell_;
  mutable std::atomic<int> _cell_cached_byte_size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_snake_2eproto;
};
// -------------------------------------------------------------------

class Screen : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:examples.grpc_server.Screen) */ {
 public:
  Screen();
  virtual ~Screen();

  Screen(const Screen& from);

  inline Screen& operator=(const Screen& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Screen(Screen&& from) noexcept
    : Screen() {
    *this = ::std::move(from);
  }

  inline Screen& operator=(Screen&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Screen& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Screen* internal_default_instance() {
    return reinterpret_cast<const Screen*>(
               &_Screen_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(Screen* other);
  friend void swap(Screen& a, Screen& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Screen* New() const final {
    return CreateMaybeMessage<Screen>(nullptr);
  }

  Screen* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Screen>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Screen& from);
  void MergeFrom(const Screen& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Screen* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Screen_cell cell;

  // accessors -------------------------------------------------------

  // repeated .examples.grpc_server.Screen.cell grid = 6;
  int grid_size() const;
  void clear_grid();
  static const int kGridFieldNumber = 6;
  ::examples::grpc_server::Screen_cell* mutable_grid(int index);
  ::google::protobuf::RepeatedPtrField< ::examples::grpc_server::Screen_cell >*
      mutable_grid();
  const ::examples::grpc_server::Screen_cell& grid(int index) const;
  ::examples::grpc_server::Screen_cell* add_grid();
  const ::google::protobuf::RepeatedPtrField< ::examples::grpc_server::Screen_cell >&
      grid() const;

  // int32 level = 1;
  void clear_level();
  static const int kLevelFieldNumber = 1;
  ::google::protobuf::int32 level() const;
  void set_level(::google::protobuf::int32 value);

  // int32 score = 2;
  void clear_score();
  static const int kScoreFieldNumber = 2;
  ::google::protobuf::int32 score() const;
  void set_score(::google::protobuf::int32 value);

  // int32 highScore = 3;
  void clear_highscore();
  static const int kHighScoreFieldNumber = 3;
  ::google::protobuf::int32 highscore() const;
  void set_highscore(::google::protobuf::int32 value);

  // int32 gold = 4;
  void clear_gold();
  static const int kGoldFieldNumber = 4;
  ::google::protobuf::int32 gold() const;
  void set_gold(::google::protobuf::int32 value);

  // int32 obstacles = 5;
  void clear_obstacles();
  static const int kObstaclesFieldNumber = 5;
  ::google::protobuf::int32 obstacles() const;
  void set_obstacles(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:examples.grpc_server.Screen)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::examples::grpc_server::Screen_cell > grid_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 score_;
  ::google::protobuf::int32 highscore_;
  ::google::protobuf::int32 gold_;
  ::google::protobuf::int32 obstacles_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_snake_2eproto;
};
// -------------------------------------------------------------------

class EnclaveInput : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:examples.grpc_server.EnclaveInput) */ {
 public:
  EnclaveInput();
  virtual ~EnclaveInput();

  EnclaveInput(const EnclaveInput& from);

  inline EnclaveInput& operator=(const EnclaveInput& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EnclaveInput(EnclaveInput&& from) noexcept
    : EnclaveInput() {
    *this = ::std::move(from);
  }

  inline EnclaveInput& operator=(EnclaveInput&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const EnclaveInput& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EnclaveInput* internal_default_instance() {
    return reinterpret_cast<const EnclaveInput*>(
               &_EnclaveInput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(EnclaveInput* other);
  friend void swap(EnclaveInput& a, EnclaveInput& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EnclaveInput* New() const final {
    return CreateMaybeMessage<EnclaveInput>(nullptr);
  }

  EnclaveInput* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EnclaveInput>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EnclaveInput& from);
  void MergeFrom(const EnclaveInput& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnclaveInput* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .examples.grpc_server.Snake snake_in = 9001;
  bool has_snake_in() const;
  void clear_snake_in();
  static const int kSnakeInFieldNumber = 9001;
  const ::examples::grpc_server::Snake& snake_in() const;
  ::examples::grpc_server::Snake* release_snake_in();
  ::examples::grpc_server::Snake* mutable_snake_in();
  void set_allocated_snake_in(::examples::grpc_server::Snake* snake_in);

  // .examples.grpc_server.Screen screen_in = 9002;
  bool has_screen_in() const;
  void clear_screen_in();
  static const int kScreenInFieldNumber = 9002;
  const ::examples::grpc_server::Screen& screen_in() const;
  ::examples::grpc_server::Screen* release_screen_in();
  ::examples::grpc_server::Screen* mutable_screen_in();
  void set_allocated_screen_in(::examples::grpc_server::Screen* screen_in);

  // @@protoc_insertion_point(class_scope:examples.grpc_server.EnclaveInput)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::examples::grpc_server::Snake* snake_in_;
  ::examples::grpc_server::Screen* screen_in_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_snake_2eproto;
};
// -------------------------------------------------------------------

class EnclaveOutput : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:examples.grpc_server.EnclaveOutput) */ {
 public:
  EnclaveOutput();
  virtual ~EnclaveOutput();

  EnclaveOutput(const EnclaveOutput& from);

  inline EnclaveOutput& operator=(const EnclaveOutput& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EnclaveOutput(EnclaveOutput&& from) noexcept
    : EnclaveOutput() {
    *this = ::std::move(from);
  }

  inline EnclaveOutput& operator=(EnclaveOutput&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const EnclaveOutput& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EnclaveOutput* internal_default_instance() {
    return reinterpret_cast<const EnclaveOutput*>(
               &_EnclaveOutput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(EnclaveOutput* other);
  friend void swap(EnclaveOutput& a, EnclaveOutput& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EnclaveOutput* New() const final {
    return CreateMaybeMessage<EnclaveOutput>(nullptr);
  }

  EnclaveOutput* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EnclaveOutput>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EnclaveOutput& from);
  void MergeFrom(const EnclaveOutput& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnclaveOutput* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .examples.grpc_server.Snake snake_out = 9001;
  bool has_snake_out() const;
  void clear_snake_out();
  static const int kSnakeOutFieldNumber = 9001;
  const ::examples::grpc_server::Snake& snake_out() const;
  ::examples::grpc_server::Snake* release_snake_out();
  ::examples::grpc_server::Snake* mutable_snake_out();
  void set_allocated_snake_out(::examples::grpc_server::Snake* snake_out);

  // .examples.grpc_server.Screen screen_out = 9002;
  bool has_screen_out() const;
  void clear_screen_out();
  static const int kScreenOutFieldNumber = 9002;
  const ::examples::grpc_server::Screen& screen_out() const;
  ::examples::grpc_server::Screen* release_screen_out();
  ::examples::grpc_server::Screen* mutable_screen_out();
  void set_allocated_screen_out(::examples::grpc_server::Screen* screen_out);

  // .examples.grpc_server.ReturnValue ret = 9003;
  bool has_ret() const;
  void clear_ret();
  static const int kRetFieldNumber = 9003;
  const ::examples::grpc_server::ReturnValue& ret() const;
  ::examples::grpc_server::ReturnValue* release_ret();
  ::examples::grpc_server::ReturnValue* mutable_ret();
  void set_allocated_ret(::examples::grpc_server::ReturnValue* ret);

  // @@protoc_insertion_point(class_scope:examples.grpc_server.EnclaveOutput)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::examples::grpc_server::Snake* snake_out_;
  ::examples::grpc_server::Screen* screen_out_;
  ::examples::grpc_server::ReturnValue* ret_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_snake_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ReturnValue

// int32 eat_gold = 1;
inline void ReturnValue::clear_eat_gold() {
  eat_gold_ = 0;
}
inline ::google::protobuf::int32 ReturnValue::eat_gold() const {
  // @@protoc_insertion_point(field_get:examples.grpc_server.ReturnValue.eat_gold)
  return eat_gold_;
}
inline void ReturnValue::set_eat_gold(::google::protobuf::int32 value) {
  
  eat_gold_ = value;
  // @@protoc_insertion_point(field_set:examples.grpc_server.ReturnValue.eat_gold)
}

// -------------------------------------------------------------------

// SnakeSegment

// int32 row = 1;
inline void SnakeSegment::clear_row() {
  row_ = 0;
}
inline ::google::protobuf::int32 SnakeSegment::row() const {
  // @@protoc_insertion_point(field_get:examples.grpc_server.SnakeSegment.row)
  return row_;
}
inline void SnakeSegment::set_row(::google::protobuf::int32 value) {
  
  row_ = value;
  // @@protoc_insertion_point(field_set:examples.grpc_server.SnakeSegment.row)
}

// int32 col = 2;
inline void SnakeSegment::clear_col() {
  col_ = 0;
}
inline ::google::protobuf::int32 SnakeSegment::col() const {
  // @@protoc_insertion_point(field_get:examples.grpc_server.SnakeSegment.col)
  return col_;
}
inline void SnakeSegment::set_col(::google::protobuf::int32 value) {
  
  col_ = value;
  // @@protoc_insertion_point(field_set:examples.grpc_server.SnakeSegment.col)
}

// -------------------------------------------------------------------

// Snake

// uint32 speed = 1;
inline void Snake::clear_speed() {
  speed_ = 0u;
}
inline ::google::protobuf::uint32 Snake::speed() const {
  // @@protoc_insertion_point(field_get:examples.grpc_server.Snake.speed)
  return speed_;
}
inline void Snake::set_speed(::google::protobuf::uint32 value) {
  
  speed_ = value;
  // @@protoc_insertion_point(field_set:examples.grpc_server.Snake.speed)
}

// .examples.grpc_server.Snake.direction_t direction = 2;
inline void Snake::clear_direction() {
  direction_ = 0;
}
inline ::examples::grpc_server::Snake_direction_t Snake::direction() const {
  // @@protoc_insertion_point(field_get:examples.grpc_server.Snake.direction)
  return static_cast< ::examples::grpc_server::Snake_direction_t >(direction_);
}
inline void Snake::set_direction(::examples::grpc_server::Snake_direction_t value) {
  
  direction_ = value;
  // @@protoc_insertion_point(field_set:examples.grpc_server.Snake.direction)
}

// int32 len = 3;
inline void Snake::clear_len() {
  len_ = 0;
}
inline ::google::protobuf::int32 Snake::len() const {
  // @@protoc_insertion_point(field_get:examples.grpc_server.Snake.len)
  return len_;
}
inline void Snake::set_len(::google::protobuf::int32 value) {
  
  len_ = value;
  // @@protoc_insertion_point(field_set:examples.grpc_server.Snake.len)
}

// repeated .examples.grpc_server.SnakeSegment body = 4;
inline int Snake::body_size() const {
  return body_.size();
}
inline void Snake::clear_body() {
  body_.Clear();
}
inline ::examples::grpc_server::SnakeSegment* Snake::mutable_body(int index) {
  // @@protoc_insertion_point(field_mutable:examples.grpc_server.Snake.body)
  return body_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::examples::grpc_server::SnakeSegment >*
Snake::mutable_body() {
  // @@protoc_insertion_point(field_mutable_list:examples.grpc_server.Snake.body)
  return &body_;
}
inline const ::examples::grpc_server::SnakeSegment& Snake::body(int index) const {
  // @@protoc_insertion_point(field_get:examples.grpc_server.Snake.body)
  return body_.Get(index);
}
inline ::examples::grpc_server::SnakeSegment* Snake::add_body() {
  // @@protoc_insertion_point(field_add:examples.grpc_server.Snake.body)
  return body_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::examples::grpc_server::SnakeSegment >&
Snake::body() const {
  // @@protoc_insertion_point(field_list:examples.grpc_server.Snake.body)
  return body_;
}

// -------------------------------------------------------------------

// Screen_cell

// repeated int32 cell = 1;
inline int Screen_cell::cell_size() const {
  return cell_.size();
}
inline void Screen_cell::clear_cell() {
  cell_.Clear();
}
inline ::google::protobuf::int32 Screen_cell::cell(int index) const {
  // @@protoc_insertion_point(field_get:examples.grpc_server.Screen.cell.cell)
  return cell_.Get(index);
}
inline void Screen_cell::set_cell(int index, ::google::protobuf::int32 value) {
  cell_.Set(index, value);
  // @@protoc_insertion_point(field_set:examples.grpc_server.Screen.cell.cell)
}
inline void Screen_cell::add_cell(::google::protobuf::int32 value) {
  cell_.Add(value);
  // @@protoc_insertion_point(field_add:examples.grpc_server.Screen.cell.cell)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Screen_cell::cell() const {
  // @@protoc_insertion_point(field_list:examples.grpc_server.Screen.cell.cell)
  return cell_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Screen_cell::mutable_cell() {
  // @@protoc_insertion_point(field_mutable_list:examples.grpc_server.Screen.cell.cell)
  return &cell_;
}

// -------------------------------------------------------------------

// Screen

// int32 level = 1;
inline void Screen::clear_level() {
  level_ = 0;
}
inline ::google::protobuf::int32 Screen::level() const {
  // @@protoc_insertion_point(field_get:examples.grpc_server.Screen.level)
  return level_;
}
inline void Screen::set_level(::google::protobuf::int32 value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:examples.grpc_server.Screen.level)
}

// int32 score = 2;
inline void Screen::clear_score() {
  score_ = 0;
}
inline ::google::protobuf::int32 Screen::score() const {
  // @@protoc_insertion_point(field_get:examples.grpc_server.Screen.score)
  return score_;
}
inline void Screen::set_score(::google::protobuf::int32 value) {
  
  score_ = value;
  // @@protoc_insertion_point(field_set:examples.grpc_server.Screen.score)
}

// int32 highScore = 3;
inline void Screen::clear_highscore() {
  highscore_ = 0;
}
inline ::google::protobuf::int32 Screen::highscore() const {
  // @@protoc_insertion_point(field_get:examples.grpc_server.Screen.highScore)
  return highscore_;
}
inline void Screen::set_highscore(::google::protobuf::int32 value) {
  
  highscore_ = value;
  // @@protoc_insertion_point(field_set:examples.grpc_server.Screen.highScore)
}

// int32 gold = 4;
inline void Screen::clear_gold() {
  gold_ = 0;
}
inline ::google::protobuf::int32 Screen::gold() const {
  // @@protoc_insertion_point(field_get:examples.grpc_server.Screen.gold)
  return gold_;
}
inline void Screen::set_gold(::google::protobuf::int32 value) {
  
  gold_ = value;
  // @@protoc_insertion_point(field_set:examples.grpc_server.Screen.gold)
}

// int32 obstacles = 5;
inline void Screen::clear_obstacles() {
  obstacles_ = 0;
}
inline ::google::protobuf::int32 Screen::obstacles() const {
  // @@protoc_insertion_point(field_get:examples.grpc_server.Screen.obstacles)
  return obstacles_;
}
inline void Screen::set_obstacles(::google::protobuf::int32 value) {
  
  obstacles_ = value;
  // @@protoc_insertion_point(field_set:examples.grpc_server.Screen.obstacles)
}

// repeated .examples.grpc_server.Screen.cell grid = 6;
inline int Screen::grid_size() const {
  return grid_.size();
}
inline void Screen::clear_grid() {
  grid_.Clear();
}
inline ::examples::grpc_server::Screen_cell* Screen::mutable_grid(int index) {
  // @@protoc_insertion_point(field_mutable:examples.grpc_server.Screen.grid)
  return grid_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::examples::grpc_server::Screen_cell >*
Screen::mutable_grid() {
  // @@protoc_insertion_point(field_mutable_list:examples.grpc_server.Screen.grid)
  return &grid_;
}
inline const ::examples::grpc_server::Screen_cell& Screen::grid(int index) const {
  // @@protoc_insertion_point(field_get:examples.grpc_server.Screen.grid)
  return grid_.Get(index);
}
inline ::examples::grpc_server::Screen_cell* Screen::add_grid() {
  // @@protoc_insertion_point(field_add:examples.grpc_server.Screen.grid)
  return grid_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::examples::grpc_server::Screen_cell >&
Screen::grid() const {
  // @@protoc_insertion_point(field_list:examples.grpc_server.Screen.grid)
  return grid_;
}

// -------------------------------------------------------------------

// EnclaveInput

// .examples.grpc_server.Snake snake_in = 9001;
inline bool EnclaveInput::has_snake_in() const {
  return this != internal_default_instance() && snake_in_ != nullptr;
}
inline void EnclaveInput::clear_snake_in() {
  if (GetArenaNoVirtual() == nullptr && snake_in_ != nullptr) {
    delete snake_in_;
  }
  snake_in_ = nullptr;
}
inline const ::examples::grpc_server::Snake& EnclaveInput::snake_in() const {
  const ::examples::grpc_server::Snake* p = snake_in_;
  // @@protoc_insertion_point(field_get:examples.grpc_server.EnclaveInput.snake_in)
  return p != nullptr ? *p : *reinterpret_cast<const ::examples::grpc_server::Snake*>(
      &::examples::grpc_server::_Snake_default_instance_);
}
inline ::examples::grpc_server::Snake* EnclaveInput::release_snake_in() {
  // @@protoc_insertion_point(field_release:examples.grpc_server.EnclaveInput.snake_in)
  
  ::examples::grpc_server::Snake* temp = snake_in_;
  snake_in_ = nullptr;
  return temp;
}
inline ::examples::grpc_server::Snake* EnclaveInput::mutable_snake_in() {
  
  if (snake_in_ == nullptr) {
    auto* p = CreateMaybeMessage<::examples::grpc_server::Snake>(GetArenaNoVirtual());
    snake_in_ = p;
  }
  // @@protoc_insertion_point(field_mutable:examples.grpc_server.EnclaveInput.snake_in)
  return snake_in_;
}
inline void EnclaveInput::set_allocated_snake_in(::examples::grpc_server::Snake* snake_in) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete snake_in_;
  }
  if (snake_in) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      snake_in = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, snake_in, submessage_arena);
    }
    
  } else {
    
  }
  snake_in_ = snake_in;
  // @@protoc_insertion_point(field_set_allocated:examples.grpc_server.EnclaveInput.snake_in)
}

// .examples.grpc_server.Screen screen_in = 9002;
inline bool EnclaveInput::has_screen_in() const {
  return this != internal_default_instance() && screen_in_ != nullptr;
}
inline void EnclaveInput::clear_screen_in() {
  if (GetArenaNoVirtual() == nullptr && screen_in_ != nullptr) {
    delete screen_in_;
  }
  screen_in_ = nullptr;
}
inline const ::examples::grpc_server::Screen& EnclaveInput::screen_in() const {
  const ::examples::grpc_server::Screen* p = screen_in_;
  // @@protoc_insertion_point(field_get:examples.grpc_server.EnclaveInput.screen_in)
  return p != nullptr ? *p : *reinterpret_cast<const ::examples::grpc_server::Screen*>(
      &::examples::grpc_server::_Screen_default_instance_);
}
inline ::examples::grpc_server::Screen* EnclaveInput::release_screen_in() {
  // @@protoc_insertion_point(field_release:examples.grpc_server.EnclaveInput.screen_in)
  
  ::examples::grpc_server::Screen* temp = screen_in_;
  screen_in_ = nullptr;
  return temp;
}
inline ::examples::grpc_server::Screen* EnclaveInput::mutable_screen_in() {
  
  if (screen_in_ == nullptr) {
    auto* p = CreateMaybeMessage<::examples::grpc_server::Screen>(GetArenaNoVirtual());
    screen_in_ = p;
  }
  // @@protoc_insertion_point(field_mutable:examples.grpc_server.EnclaveInput.screen_in)
  return screen_in_;
}
inline void EnclaveInput::set_allocated_screen_in(::examples::grpc_server::Screen* screen_in) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete screen_in_;
  }
  if (screen_in) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      screen_in = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, screen_in, submessage_arena);
    }
    
  } else {
    
  }
  screen_in_ = screen_in;
  // @@protoc_insertion_point(field_set_allocated:examples.grpc_server.EnclaveInput.screen_in)
}

// -------------------------------------------------------------------

// EnclaveOutput

// .examples.grpc_server.Snake snake_out = 9001;
inline bool EnclaveOutput::has_snake_out() const {
  return this != internal_default_instance() && snake_out_ != nullptr;
}
inline void EnclaveOutput::clear_snake_out() {
  if (GetArenaNoVirtual() == nullptr && snake_out_ != nullptr) {
    delete snake_out_;
  }
  snake_out_ = nullptr;
}
inline const ::examples::grpc_server::Snake& EnclaveOutput::snake_out() const {
  const ::examples::grpc_server::Snake* p = snake_out_;
  // @@protoc_insertion_point(field_get:examples.grpc_server.EnclaveOutput.snake_out)
  return p != nullptr ? *p : *reinterpret_cast<const ::examples::grpc_server::Snake*>(
      &::examples::grpc_server::_Snake_default_instance_);
}
inline ::examples::grpc_server::Snake* EnclaveOutput::release_snake_out() {
  // @@protoc_insertion_point(field_release:examples.grpc_server.EnclaveOutput.snake_out)
  
  ::examples::grpc_server::Snake* temp = snake_out_;
  snake_out_ = nullptr;
  return temp;
}
inline ::examples::grpc_server::Snake* EnclaveOutput::mutable_snake_out() {
  
  if (snake_out_ == nullptr) {
    auto* p = CreateMaybeMessage<::examples::grpc_server::Snake>(GetArenaNoVirtual());
    snake_out_ = p;
  }
  // @@protoc_insertion_point(field_mutable:examples.grpc_server.EnclaveOutput.snake_out)
  return snake_out_;
}
inline void EnclaveOutput::set_allocated_snake_out(::examples::grpc_server::Snake* snake_out) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete snake_out_;
  }
  if (snake_out) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      snake_out = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, snake_out, submessage_arena);
    }
    
  } else {
    
  }
  snake_out_ = snake_out;
  // @@protoc_insertion_point(field_set_allocated:examples.grpc_server.EnclaveOutput.snake_out)
}

// .examples.grpc_server.Screen screen_out = 9002;
inline bool EnclaveOutput::has_screen_out() const {
  return this != internal_default_instance() && screen_out_ != nullptr;
}
inline void EnclaveOutput::clear_screen_out() {
  if (GetArenaNoVirtual() == nullptr && screen_out_ != nullptr) {
    delete screen_out_;
  }
  screen_out_ = nullptr;
}
inline const ::examples::grpc_server::Screen& EnclaveOutput::screen_out() const {
  const ::examples::grpc_server::Screen* p = screen_out_;
  // @@protoc_insertion_point(field_get:examples.grpc_server.EnclaveOutput.screen_out)
  return p != nullptr ? *p : *reinterpret_cast<const ::examples::grpc_server::Screen*>(
      &::examples::grpc_server::_Screen_default_instance_);
}
inline ::examples::grpc_server::Screen* EnclaveOutput::release_screen_out() {
  // @@protoc_insertion_point(field_release:examples.grpc_server.EnclaveOutput.screen_out)
  
  ::examples::grpc_server::Screen* temp = screen_out_;
  screen_out_ = nullptr;
  return temp;
}
inline ::examples::grpc_server::Screen* EnclaveOutput::mutable_screen_out() {
  
  if (screen_out_ == nullptr) {
    auto* p = CreateMaybeMessage<::examples::grpc_server::Screen>(GetArenaNoVirtual());
    screen_out_ = p;
  }
  // @@protoc_insertion_point(field_mutable:examples.grpc_server.EnclaveOutput.screen_out)
  return screen_out_;
}
inline void EnclaveOutput::set_allocated_screen_out(::examples::grpc_server::Screen* screen_out) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete screen_out_;
  }
  if (screen_out) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      screen_out = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, screen_out, submessage_arena);
    }
    
  } else {
    
  }
  screen_out_ = screen_out;
  // @@protoc_insertion_point(field_set_allocated:examples.grpc_server.EnclaveOutput.screen_out)
}

// .examples.grpc_server.ReturnValue ret = 9003;
inline bool EnclaveOutput::has_ret() const {
  return this != internal_default_instance() && ret_ != nullptr;
}
inline void EnclaveOutput::clear_ret() {
  if (GetArenaNoVirtual() == nullptr && ret_ != nullptr) {
    delete ret_;
  }
  ret_ = nullptr;
}
inline const ::examples::grpc_server::ReturnValue& EnclaveOutput::ret() const {
  const ::examples::grpc_server::ReturnValue* p = ret_;
  // @@protoc_insertion_point(field_get:examples.grpc_server.EnclaveOutput.ret)
  return p != nullptr ? *p : *reinterpret_cast<const ::examples::grpc_server::ReturnValue*>(
      &::examples::grpc_server::_ReturnValue_default_instance_);
}
inline ::examples::grpc_server::ReturnValue* EnclaveOutput::release_ret() {
  // @@protoc_insertion_point(field_release:examples.grpc_server.EnclaveOutput.ret)
  
  ::examples::grpc_server::ReturnValue* temp = ret_;
  ret_ = nullptr;
  return temp;
}
inline ::examples::grpc_server::ReturnValue* EnclaveOutput::mutable_ret() {
  
  if (ret_ == nullptr) {
    auto* p = CreateMaybeMessage<::examples::grpc_server::ReturnValue>(GetArenaNoVirtual());
    ret_ = p;
  }
  // @@protoc_insertion_point(field_mutable:examples.grpc_server.EnclaveOutput.ret)
  return ret_;
}
inline void EnclaveOutput::set_allocated_ret(::examples::grpc_server::ReturnValue* ret) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ret_;
  }
  if (ret) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ret = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ret, submessage_arena);
    }
    
  } else {
    
  }
  ret_ = ret;
  // @@protoc_insertion_point(field_set_allocated:examples.grpc_server.EnclaveOutput.ret)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace grpc_server
}  // namespace examples

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::examples::grpc_server::Snake_direction_t> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::examples::grpc_server::Snake_direction_t>() {
  return ::examples::grpc_server::Snake_direction_t_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_snake_2eproto
