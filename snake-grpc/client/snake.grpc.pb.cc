// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: snake.proto

#include "snake.pb.h"
#include "snake.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace examples {
namespace grpc_server {

static const char* SnakeService_method_names[] = {
  "/examples.grpc_server.SnakeService/EatGold",
};

std::unique_ptr< SnakeService::Stub> SnakeService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< SnakeService::Stub> stub(new SnakeService::Stub(channel));
  return stub;
}

SnakeService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_EatGold_(SnakeService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status SnakeService::Stub::EatGold(::grpc::ClientContext* context, const ::examples::grpc_server::EnclaveInput& request, ::examples::grpc_server::EnclaveOutput* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_EatGold_, context, request, response);
}

void SnakeService::Stub::experimental_async::EatGold(::grpc::ClientContext* context, const ::examples::grpc_server::EnclaveInput* request, ::examples::grpc_server::EnclaveOutput* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_EatGold_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::examples::grpc_server::EnclaveOutput>* SnakeService::Stub::AsyncEatGoldRaw(::grpc::ClientContext* context, const ::examples::grpc_server::EnclaveInput& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::examples::grpc_server::EnclaveOutput>::Create(channel_.get(), cq, rpcmethod_EatGold_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::examples::grpc_server::EnclaveOutput>* SnakeService::Stub::PrepareAsyncEatGoldRaw(::grpc::ClientContext* context, const ::examples::grpc_server::EnclaveInput& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::examples::grpc_server::EnclaveOutput>::Create(channel_.get(), cq, rpcmethod_EatGold_, context, request, false);
}

SnakeService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SnakeService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SnakeService::Service, ::examples::grpc_server::EnclaveInput, ::examples::grpc_server::EnclaveOutput>(
          std::mem_fn(&SnakeService::Service::EatGold), this)));
}

SnakeService::Service::~Service() {
}

::grpc::Status SnakeService::Service::EatGold(::grpc::ServerContext* context, const ::examples::grpc_server::EnclaveInput* request, ::examples::grpc_server::EnclaveOutput* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace examples
}  // namespace grpc_server

