// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: snake_server.proto

#include "snake_server.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_snake_5fserver_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ReturnValue_snake_5fserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_snake_5fserver_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Screen_cell_snake_5fserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_snake_5fserver_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SnakeSegment_snake_5fserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_snake_5fserver_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Screen_snake_5fserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_snake_5fserver_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Snake_snake_5fserver_2eproto;
namespace examples {
namespace grpc_server {
class ReturnValueDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReturnValue> _instance;
} _ReturnValue_default_instance_;
class SnakeSegmentDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SnakeSegment> _instance;
} _SnakeSegment_default_instance_;
class SnakeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Snake> _instance;
} _Snake_default_instance_;
class Screen_cellDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Screen_cell> _instance;
} _Screen_cell_default_instance_;
class ScreenDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Screen> _instance;
} _Screen_default_instance_;
class EnclaveInputDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EnclaveInput> _instance;
} _EnclaveInput_default_instance_;
class EnclaveOutputDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EnclaveOutput> _instance;
} _EnclaveOutput_default_instance_;
}  // namespace grpc_server
}  // namespace examples
static void InitDefaultsReturnValue_snake_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::examples::grpc_server::_ReturnValue_default_instance_;
    new (ptr) ::examples::grpc_server::ReturnValue();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::examples::grpc_server::ReturnValue::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ReturnValue_snake_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsReturnValue_snake_5fserver_2eproto}, {}};

static void InitDefaultsSnakeSegment_snake_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::examples::grpc_server::_SnakeSegment_default_instance_;
    new (ptr) ::examples::grpc_server::SnakeSegment();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::examples::grpc_server::SnakeSegment::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SnakeSegment_snake_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSnakeSegment_snake_5fserver_2eproto}, {}};

static void InitDefaultsSnake_snake_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::examples::grpc_server::_Snake_default_instance_;
    new (ptr) ::examples::grpc_server::Snake();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::examples::grpc_server::Snake::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Snake_snake_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSnake_snake_5fserver_2eproto}, {
      &scc_info_SnakeSegment_snake_5fserver_2eproto.base,}};

static void InitDefaultsScreen_cell_snake_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::examples::grpc_server::_Screen_cell_default_instance_;
    new (ptr) ::examples::grpc_server::Screen_cell();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::examples::grpc_server::Screen_cell::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Screen_cell_snake_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsScreen_cell_snake_5fserver_2eproto}, {}};

static void InitDefaultsScreen_snake_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::examples::grpc_server::_Screen_default_instance_;
    new (ptr) ::examples::grpc_server::Screen();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::examples::grpc_server::Screen::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Screen_snake_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsScreen_snake_5fserver_2eproto}, {
      &scc_info_Screen_cell_snake_5fserver_2eproto.base,}};

static void InitDefaultsEnclaveInput_snake_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::examples::grpc_server::_EnclaveInput_default_instance_;
    new (ptr) ::examples::grpc_server::EnclaveInput();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::examples::grpc_server::EnclaveInput::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_EnclaveInput_snake_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsEnclaveInput_snake_5fserver_2eproto}, {
      &scc_info_Snake_snake_5fserver_2eproto.base,
      &scc_info_Screen_snake_5fserver_2eproto.base,}};

static void InitDefaultsEnclaveOutput_snake_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::examples::grpc_server::_EnclaveOutput_default_instance_;
    new (ptr) ::examples::grpc_server::EnclaveOutput();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::examples::grpc_server::EnclaveOutput::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_EnclaveOutput_snake_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsEnclaveOutput_snake_5fserver_2eproto}, {
      &scc_info_Snake_snake_5fserver_2eproto.base,
      &scc_info_Screen_snake_5fserver_2eproto.base,
      &scc_info_ReturnValue_snake_5fserver_2eproto.base,}};

void InitDefaults_snake_5fserver_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_ReturnValue_snake_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SnakeSegment_snake_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Snake_snake_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Screen_cell_snake_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Screen_snake_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_EnclaveInput_snake_5fserver_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_EnclaveOutput_snake_5fserver_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_snake_5fserver_2eproto[7];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_snake_5fserver_2eproto[1];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_snake_5fserver_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_snake_5fserver_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::examples::grpc_server::ReturnValue, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::examples::grpc_server::ReturnValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::examples::grpc_server::ReturnValue, eat_gold_),
  0,
  PROTOBUF_FIELD_OFFSET(::examples::grpc_server::SnakeSegment, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::examples::grpc_server::SnakeSegment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::examples::grpc_server::SnakeSegment, row_),
  PROTOBUF_FIELD_OFFSET(::examples::grpc_server::SnakeSegment, col_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::examples::grpc_server::Snake, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::examples::grpc_server::Snake, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::examples::grpc_server::Snake, speed_),
  PROTOBUF_FIELD_OFFSET(::examples::grpc_server::Snake, direction_),
  PROTOBUF_FIELD_OFFSET(::examples::grpc_server::Snake, len_),
  PROTOBUF_FIELD_OFFSET(::examples::grpc_server::Snake, body_),
  0,
  1,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::examples::grpc_server::Screen_cell, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::examples::grpc_server::Screen_cell, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::examples::grpc_server::Screen_cell, cell_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::examples::grpc_server::Screen, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::examples::grpc_server::Screen, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::examples::grpc_server::Screen, level_),
  PROTOBUF_FIELD_OFFSET(::examples::grpc_server::Screen, score_),
  PROTOBUF_FIELD_OFFSET(::examples::grpc_server::Screen, highscore_),
  PROTOBUF_FIELD_OFFSET(::examples::grpc_server::Screen, gold_),
  PROTOBUF_FIELD_OFFSET(::examples::grpc_server::Screen, obstacles_),
  PROTOBUF_FIELD_OFFSET(::examples::grpc_server::Screen, grid_),
  0,
  1,
  2,
  3,
  4,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::examples::grpc_server::EnclaveInput, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::examples::grpc_server::EnclaveInput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::examples::grpc_server::EnclaveInput, snake_in_),
  PROTOBUF_FIELD_OFFSET(::examples::grpc_server::EnclaveInput, screen_in_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::examples::grpc_server::EnclaveOutput, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::examples::grpc_server::EnclaveOutput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::examples::grpc_server::EnclaveOutput, snake_out_),
  PROTOBUF_FIELD_OFFSET(::examples::grpc_server::EnclaveOutput, screen_out_),
  PROTOBUF_FIELD_OFFSET(::examples::grpc_server::EnclaveOutput, ret_),
  0,
  1,
  2,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::examples::grpc_server::ReturnValue)},
  { 7, 14, sizeof(::examples::grpc_server::SnakeSegment)},
  { 16, 25, sizeof(::examples::grpc_server::Snake)},
  { 29, 35, sizeof(::examples::grpc_server::Screen_cell)},
  { 36, 47, sizeof(::examples::grpc_server::Screen)},
  { 53, 60, sizeof(::examples::grpc_server::EnclaveInput)},
  { 62, 70, sizeof(::examples::grpc_server::EnclaveOutput)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::examples::grpc_server::_ReturnValue_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::examples::grpc_server::_SnakeSegment_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::examples::grpc_server::_Snake_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::examples::grpc_server::_Screen_cell_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::examples::grpc_server::_Screen_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::examples::grpc_server::_EnclaveInput_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::examples::grpc_server::_EnclaveOutput_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_snake_5fserver_2eproto = {
  {}, AddDescriptors_snake_5fserver_2eproto, "snake_server.proto", schemas,
  file_default_instances, TableStruct_snake_5fserver_2eproto::offsets,
  file_level_metadata_snake_5fserver_2eproto, 7, file_level_enum_descriptors_snake_5fserver_2eproto, file_level_service_descriptors_snake_5fserver_2eproto,
};

const char descriptor_table_protodef_snake_5fserver_2eproto[] =
  "\n\022snake_server.proto\022\024examples.grpc_serv"
  "er\"\037\n\013ReturnValue\022\020\n\010eat_gold\030\001 \001(\005\"(\n\014S"
  "nakeSegment\022\013\n\003row\030\001 \001(\005\022\013\n\003col\030\002 \001(\005\"\204\002"
  "\n\005Snake\022\r\n\005speed\030\001 \001(\r\022@\n\tdirection\030\002 \001("
  "\0162\'.examples.grpc_server.Snake.direction"
  "_t:\004LEFT\022\013\n\003len\030\003 \001(\005\0220\n\004body\030\004 \003(\0132\".ex"
  "amples.grpc_server.SnakeSegment\"k\n\013direc"
  "tion_t\022\010\n\004LEFT\020\000\022\t\n\005RIGHT\020\001\022\006\n\002UP\020\002\022\010\n\004D"
  "OWN\020\003\022\r\n\tLEFT_TURN\020\004\022\016\n\nRIGHT_TURN\020\005\022\010\n\004"
  "QUIT\020\006\022\014\n\010NUM_KEYS\020\007\"\241\001\n\006Screen\022\r\n\005level"
  "\030\001 \001(\005\022\r\n\005score\030\002 \001(\005\022\021\n\thighScore\030\003 \001(\005"
  "\022\014\n\004gold\030\004 \001(\005\022\021\n\tobstacles\030\005 \001(\005\022/\n\004gri"
  "d\030\006 \003(\0132!.examples.grpc_server.Screen.ce"
  "ll\032\024\n\004cell\022\014\n\004cell\030\001 \003(\005\"p\n\014EnclaveInput"
  "\022.\n\010snake_in\030\251F \001(\0132\033.examples.grpc_serv"
  "er.Snake\0220\n\tscreen_in\030\252F \001(\0132\034.examples."
  "grpc_server.Screen\"\244\001\n\rEnclaveOutput\022/\n\t"
  "snake_out\030\251F \001(\0132\033.examples.grpc_server."
  "Snake\0221\n\nscreen_out\030\252F \001(\0132\034.examples.gr"
  "pc_server.Screen\022/\n\003ret\030\253F \001(\0132!.example"
  "s.grpc_server.ReturnValue2d\n\014SnakeServic"
  "e\022T\n\007EatGold\022\".examples.grpc_server.Encl"
  "aveInput\032#.examples.grpc_server.EnclaveO"
  "utput\"\000"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_snake_5fserver_2eproto = {
  false, InitDefaults_snake_5fserver_2eproto, 
  descriptor_table_protodef_snake_5fserver_2eproto,
  "snake_server.proto", &assign_descriptors_table_snake_5fserver_2eproto, 927,
};

void AddDescriptors_snake_5fserver_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_snake_5fserver_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_snake_5fserver_2eproto = []() { AddDescriptors_snake_5fserver_2eproto(); return true; }();
namespace examples {
namespace grpc_server {
const ::google::protobuf::EnumDescriptor* Snake_direction_t_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_snake_5fserver_2eproto);
  return file_level_enum_descriptors_snake_5fserver_2eproto[0];
}
bool Snake_direction_t_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Snake_direction_t Snake::LEFT;
const Snake_direction_t Snake::RIGHT;
const Snake_direction_t Snake::UP;
const Snake_direction_t Snake::DOWN;
const Snake_direction_t Snake::LEFT_TURN;
const Snake_direction_t Snake::RIGHT_TURN;
const Snake_direction_t Snake::QUIT;
const Snake_direction_t Snake::NUM_KEYS;
const Snake_direction_t Snake::direction_t_MIN;
const Snake_direction_t Snake::direction_t_MAX;
const int Snake::direction_t_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void ReturnValue::InitAsDefaultInstance() {
}
class ReturnValue::HasBitSetters {
 public:
  static void set_has_eat_gold(ReturnValue* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReturnValue::kEatGoldFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReturnValue::ReturnValue()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:examples.grpc_server.ReturnValue)
}
ReturnValue::ReturnValue(const ReturnValue& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  eat_gold_ = from.eat_gold_;
  // @@protoc_insertion_point(copy_constructor:examples.grpc_server.ReturnValue)
}

void ReturnValue::SharedCtor() {
  eat_gold_ = 0;
}

ReturnValue::~ReturnValue() {
  // @@protoc_insertion_point(destructor:examples.grpc_server.ReturnValue)
  SharedDtor();
}

void ReturnValue::SharedDtor() {
}

void ReturnValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReturnValue& ReturnValue::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ReturnValue_snake_5fserver_2eproto.base);
  return *internal_default_instance();
}


void ReturnValue::Clear() {
// @@protoc_insertion_point(message_clear_start:examples.grpc_server.ReturnValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  eat_gold_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ReturnValue::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ReturnValue*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 eat_gold = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = ::google::protobuf::io::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_eat_gold(value);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ReturnValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:examples.grpc_server.ReturnValue)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eat_gold = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_eat_gold(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eat_gold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:examples.grpc_server.ReturnValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:examples.grpc_server.ReturnValue)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ReturnValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:examples.grpc_server.ReturnValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eat_gold = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eat_gold(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:examples.grpc_server.ReturnValue)
}

::google::protobuf::uint8* ReturnValue::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:examples.grpc_server.ReturnValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eat_gold = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->eat_gold(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:examples.grpc_server.ReturnValue)
  return target;
}

size_t ReturnValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:examples.grpc_server.ReturnValue)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 eat_gold = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->eat_gold());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReturnValue::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:examples.grpc_server.ReturnValue)
  GOOGLE_DCHECK_NE(&from, this);
  const ReturnValue* source =
      ::google::protobuf::DynamicCastToGenerated<ReturnValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:examples.grpc_server.ReturnValue)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:examples.grpc_server.ReturnValue)
    MergeFrom(*source);
  }
}

void ReturnValue::MergeFrom(const ReturnValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:examples.grpc_server.ReturnValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_eat_gold()) {
    set_eat_gold(from.eat_gold());
  }
}

void ReturnValue::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:examples.grpc_server.ReturnValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReturnValue::CopyFrom(const ReturnValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:examples.grpc_server.ReturnValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReturnValue::IsInitialized() const {
  return true;
}

void ReturnValue::Swap(ReturnValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReturnValue::InternalSwap(ReturnValue* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(eat_gold_, other->eat_gold_);
}

::google::protobuf::Metadata ReturnValue::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_snake_5fserver_2eproto);
  return ::file_level_metadata_snake_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SnakeSegment::InitAsDefaultInstance() {
}
class SnakeSegment::HasBitSetters {
 public:
  static void set_has_row(SnakeSegment* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_col(SnakeSegment* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SnakeSegment::kRowFieldNumber;
const int SnakeSegment::kColFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SnakeSegment::SnakeSegment()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:examples.grpc_server.SnakeSegment)
}
SnakeSegment::SnakeSegment(const SnakeSegment& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&row_, &from.row_,
    static_cast<size_t>(reinterpret_cast<char*>(&col_) -
    reinterpret_cast<char*>(&row_)) + sizeof(col_));
  // @@protoc_insertion_point(copy_constructor:examples.grpc_server.SnakeSegment)
}

void SnakeSegment::SharedCtor() {
  ::memset(&row_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&col_) -
      reinterpret_cast<char*>(&row_)) + sizeof(col_));
}

SnakeSegment::~SnakeSegment() {
  // @@protoc_insertion_point(destructor:examples.grpc_server.SnakeSegment)
  SharedDtor();
}

void SnakeSegment::SharedDtor() {
}

void SnakeSegment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SnakeSegment& SnakeSegment::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SnakeSegment_snake_5fserver_2eproto.base);
  return *internal_default_instance();
}


void SnakeSegment::Clear() {
// @@protoc_insertion_point(message_clear_start:examples.grpc_server.SnakeSegment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&row_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&col_) -
        reinterpret_cast<char*>(&row_)) + sizeof(col_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SnakeSegment::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SnakeSegment*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 row = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = ::google::protobuf::io::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_row(value);
        break;
      }
      // optional int32 col = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = ::google::protobuf::io::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_col(value);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SnakeSegment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:examples.grpc_server.SnakeSegment)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 row = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_row(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &row_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 col = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_col(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &col_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:examples.grpc_server.SnakeSegment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:examples.grpc_server.SnakeSegment)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SnakeSegment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:examples.grpc_server.SnakeSegment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 row = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->row(), output);
  }

  // optional int32 col = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->col(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:examples.grpc_server.SnakeSegment)
}

::google::protobuf::uint8* SnakeSegment::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:examples.grpc_server.SnakeSegment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 row = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->row(), target);
  }

  // optional int32 col = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->col(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:examples.grpc_server.SnakeSegment)
  return target;
}

size_t SnakeSegment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:examples.grpc_server.SnakeSegment)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 row = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->row());
    }

    // optional int32 col = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->col());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SnakeSegment::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:examples.grpc_server.SnakeSegment)
  GOOGLE_DCHECK_NE(&from, this);
  const SnakeSegment* source =
      ::google::protobuf::DynamicCastToGenerated<SnakeSegment>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:examples.grpc_server.SnakeSegment)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:examples.grpc_server.SnakeSegment)
    MergeFrom(*source);
  }
}

void SnakeSegment::MergeFrom(const SnakeSegment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:examples.grpc_server.SnakeSegment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      row_ = from.row_;
    }
    if (cached_has_bits & 0x00000002u) {
      col_ = from.col_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SnakeSegment::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:examples.grpc_server.SnakeSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnakeSegment::CopyFrom(const SnakeSegment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:examples.grpc_server.SnakeSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnakeSegment::IsInitialized() const {
  return true;
}

void SnakeSegment::Swap(SnakeSegment* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SnakeSegment::InternalSwap(SnakeSegment* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(row_, other->row_);
  swap(col_, other->col_);
}

::google::protobuf::Metadata SnakeSegment::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_snake_5fserver_2eproto);
  return ::file_level_metadata_snake_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Snake::InitAsDefaultInstance() {
}
class Snake::HasBitSetters {
 public:
  static void set_has_speed(Snake* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_direction(Snake* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_len(Snake* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Snake::kSpeedFieldNumber;
const int Snake::kDirectionFieldNumber;
const int Snake::kLenFieldNumber;
const int Snake::kBodyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Snake::Snake()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:examples.grpc_server.Snake)
}
Snake::Snake(const Snake& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      body_(from.body_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&speed_, &from.speed_,
    static_cast<size_t>(reinterpret_cast<char*>(&len_) -
    reinterpret_cast<char*>(&speed_)) + sizeof(len_));
  // @@protoc_insertion_point(copy_constructor:examples.grpc_server.Snake)
}

void Snake::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Snake_snake_5fserver_2eproto.base);
  ::memset(&speed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&len_) -
      reinterpret_cast<char*>(&speed_)) + sizeof(len_));
}

Snake::~Snake() {
  // @@protoc_insertion_point(destructor:examples.grpc_server.Snake)
  SharedDtor();
}

void Snake::SharedDtor() {
}

void Snake::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Snake& Snake::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Snake_snake_5fserver_2eproto.base);
  return *internal_default_instance();
}


void Snake::Clear() {
// @@protoc_insertion_point(message_clear_start:examples.grpc_server.Snake)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  body_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&speed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&len_) -
        reinterpret_cast<char*>(&speed_)) + sizeof(len_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Snake::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Snake*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 speed = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = ::google::protobuf::io::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint32 value = val;
        msg->set_speed(value);
        break;
      }
      // optional .examples.grpc_server.Snake.direction_t direction = 2 [default = LEFT];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = ::google::protobuf::io::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        if (!::examples::grpc_server::Snake_direction_t_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(2, val, msg->mutable_unknown_fields());
          break;
        }
        ::examples::grpc_server::Snake_direction_t value = static_cast<::examples::grpc_server::Snake_direction_t>(val);
        msg->set_direction(value);
        break;
      }
      // optional int32 len = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = ::google::protobuf::io::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_len(value);
        break;
      }
      // repeated .examples.grpc_server.SnakeSegment body = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::Parse32(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::examples::grpc_server::SnakeSegment::_InternalParse;
          object = msg->add_body();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          bool ok = ctx->ParseExactRange({parser_till_end, object},
                                         ptr, newend);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Snake::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:examples.grpc_server.Snake)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 speed = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_speed(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .examples.grpc_server.Snake.direction_t direction = 2 [default = LEFT];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::examples::grpc_server::Snake_direction_t_IsValid(value)) {
            set_direction(static_cast< ::examples::grpc_server::Snake_direction_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 len = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_len(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &len_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .examples.grpc_server.SnakeSegment body = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_body()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:examples.grpc_server.Snake)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:examples.grpc_server.Snake)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Snake::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:examples.grpc_server.Snake)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 speed = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->speed(), output);
  }

  // optional .examples.grpc_server.Snake.direction_t direction = 2 [default = LEFT];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->direction(), output);
  }

  // optional int32 len = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->len(), output);
  }

  // repeated .examples.grpc_server.SnakeSegment body = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->body_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->body(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:examples.grpc_server.Snake)
}

::google::protobuf::uint8* Snake::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:examples.grpc_server.Snake)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 speed = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->speed(), target);
  }

  // optional .examples.grpc_server.Snake.direction_t direction = 2 [default = LEFT];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->direction(), target);
  }

  // optional int32 len = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->len(), target);
  }

  // repeated .examples.grpc_server.SnakeSegment body = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->body_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->body(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:examples.grpc_server.Snake)
  return target;
}

size_t Snake::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:examples.grpc_server.Snake)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .examples.grpc_server.SnakeSegment body = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->body_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->body(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 speed = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->speed());
    }

    // optional .examples.grpc_server.Snake.direction_t direction = 2 [default = LEFT];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->direction());
    }

    // optional int32 len = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->len());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Snake::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:examples.grpc_server.Snake)
  GOOGLE_DCHECK_NE(&from, this);
  const Snake* source =
      ::google::protobuf::DynamicCastToGenerated<Snake>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:examples.grpc_server.Snake)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:examples.grpc_server.Snake)
    MergeFrom(*source);
  }
}

void Snake::MergeFrom(const Snake& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:examples.grpc_server.Snake)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  body_.MergeFrom(from.body_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      speed_ = from.speed_;
    }
    if (cached_has_bits & 0x00000002u) {
      direction_ = from.direction_;
    }
    if (cached_has_bits & 0x00000004u) {
      len_ = from.len_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Snake::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:examples.grpc_server.Snake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Snake::CopyFrom(const Snake& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:examples.grpc_server.Snake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Snake::IsInitialized() const {
  return true;
}

void Snake::Swap(Snake* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Snake::InternalSwap(Snake* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&body_)->InternalSwap(CastToBase(&other->body_));
  swap(speed_, other->speed_);
  swap(direction_, other->direction_);
  swap(len_, other->len_);
}

::google::protobuf::Metadata Snake::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_snake_5fserver_2eproto);
  return ::file_level_metadata_snake_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Screen_cell::InitAsDefaultInstance() {
}
class Screen_cell::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Screen_cell::kCellFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Screen_cell::Screen_cell()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:examples.grpc_server.Screen.cell)
}
Screen_cell::Screen_cell(const Screen_cell& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      cell_(from.cell_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:examples.grpc_server.Screen.cell)
}

void Screen_cell::SharedCtor() {
}

Screen_cell::~Screen_cell() {
  // @@protoc_insertion_point(destructor:examples.grpc_server.Screen.cell)
  SharedDtor();
}

void Screen_cell::SharedDtor() {
}

void Screen_cell::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Screen_cell& Screen_cell::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Screen_cell_snake_5fserver_2eproto.base);
  return *internal_default_instance();
}


void Screen_cell::Clear() {
// @@protoc_insertion_point(message_clear_start:examples.grpc_server.Screen.cell)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cell_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Screen_cell::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Screen_cell*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated int32 cell = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) == 8) {
          do {
            ::google::protobuf::uint64 val;
            ptr = ::google::protobuf::io::Parse64(ptr, &val);
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            ::google::protobuf::int32 value = val;
            msg->add_cell(value);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 8 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::Parse32(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedInt32Parser;
        object = msg->mutable_cell();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Screen_cell::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:examples.grpc_server.Screen.cell)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 cell = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8u, input, this->mutable_cell())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cell())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:examples.grpc_server.Screen.cell)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:examples.grpc_server.Screen.cell)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Screen_cell::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:examples.grpc_server.Screen.cell)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 cell = 1;
  for (int i = 0, n = this->cell_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->cell(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:examples.grpc_server.Screen.cell)
}

::google::protobuf::uint8* Screen_cell::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:examples.grpc_server.Screen.cell)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 cell = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(1, this->cell_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:examples.grpc_server.Screen.cell)
  return target;
}

size_t Screen_cell::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:examples.grpc_server.Screen.cell)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 cell = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->cell_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->cell_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Screen_cell::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:examples.grpc_server.Screen.cell)
  GOOGLE_DCHECK_NE(&from, this);
  const Screen_cell* source =
      ::google::protobuf::DynamicCastToGenerated<Screen_cell>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:examples.grpc_server.Screen.cell)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:examples.grpc_server.Screen.cell)
    MergeFrom(*source);
  }
}

void Screen_cell::MergeFrom(const Screen_cell& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:examples.grpc_server.Screen.cell)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cell_.MergeFrom(from.cell_);
}

void Screen_cell::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:examples.grpc_server.Screen.cell)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Screen_cell::CopyFrom(const Screen_cell& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:examples.grpc_server.Screen.cell)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Screen_cell::IsInitialized() const {
  return true;
}

void Screen_cell::Swap(Screen_cell* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Screen_cell::InternalSwap(Screen_cell* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  cell_.InternalSwap(&other->cell_);
}

::google::protobuf::Metadata Screen_cell::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_snake_5fserver_2eproto);
  return ::file_level_metadata_snake_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Screen::InitAsDefaultInstance() {
}
class Screen::HasBitSetters {
 public:
  static void set_has_level(Screen* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_score(Screen* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_highscore(Screen* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_gold(Screen* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_obstacles(Screen* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Screen::kLevelFieldNumber;
const int Screen::kScoreFieldNumber;
const int Screen::kHighScoreFieldNumber;
const int Screen::kGoldFieldNumber;
const int Screen::kObstaclesFieldNumber;
const int Screen::kGridFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Screen::Screen()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:examples.grpc_server.Screen)
}
Screen::Screen(const Screen& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      grid_(from.grid_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&level_, &from.level_,
    static_cast<size_t>(reinterpret_cast<char*>(&obstacles_) -
    reinterpret_cast<char*>(&level_)) + sizeof(obstacles_));
  // @@protoc_insertion_point(copy_constructor:examples.grpc_server.Screen)
}

void Screen::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Screen_snake_5fserver_2eproto.base);
  ::memset(&level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&obstacles_) -
      reinterpret_cast<char*>(&level_)) + sizeof(obstacles_));
}

Screen::~Screen() {
  // @@protoc_insertion_point(destructor:examples.grpc_server.Screen)
  SharedDtor();
}

void Screen::SharedDtor() {
}

void Screen::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Screen& Screen::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Screen_snake_5fserver_2eproto.base);
  return *internal_default_instance();
}


void Screen::Clear() {
// @@protoc_insertion_point(message_clear_start:examples.grpc_server.Screen)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  grid_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&level_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&obstacles_) -
        reinterpret_cast<char*>(&level_)) + sizeof(obstacles_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Screen::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Screen*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 level = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = ::google::protobuf::io::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_level(value);
        break;
      }
      // optional int32 score = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = ::google::protobuf::io::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_score(value);
        break;
      }
      // optional int32 highScore = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = ::google::protobuf::io::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_highscore(value);
        break;
      }
      // optional int32 gold = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = ::google::protobuf::io::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_gold(value);
        break;
      }
      // optional int32 obstacles = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = ::google::protobuf::io::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_obstacles(value);
        break;
      }
      // repeated .examples.grpc_server.Screen.cell grid = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::Parse32(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::examples::grpc_server::Screen_cell::_InternalParse;
          object = msg->add_grid();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          bool ok = ctx->ParseExactRange({parser_till_end, object},
                                         ptr, newend);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 50 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Screen::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:examples.grpc_server.Screen)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 level = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_level(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 score = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_score(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 highScore = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_highscore(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &highscore_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 gold = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_gold(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 obstacles = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_obstacles(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &obstacles_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .examples.grpc_server.Screen.cell grid = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_grid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:examples.grpc_server.Screen)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:examples.grpc_server.Screen)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Screen::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:examples.grpc_server.Screen)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 level = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->level(), output);
  }

  // optional int32 score = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->score(), output);
  }

  // optional int32 highScore = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->highscore(), output);
  }

  // optional int32 gold = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->gold(), output);
  }

  // optional int32 obstacles = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->obstacles(), output);
  }

  // repeated .examples.grpc_server.Screen.cell grid = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->grid_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->grid(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:examples.grpc_server.Screen)
}

::google::protobuf::uint8* Screen::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:examples.grpc_server.Screen)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 level = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->level(), target);
  }

  // optional int32 score = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->score(), target);
  }

  // optional int32 highScore = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->highscore(), target);
  }

  // optional int32 gold = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->gold(), target);
  }

  // optional int32 obstacles = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->obstacles(), target);
  }

  // repeated .examples.grpc_server.Screen.cell grid = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->grid_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->grid(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:examples.grpc_server.Screen)
  return target;
}

size_t Screen::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:examples.grpc_server.Screen)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .examples.grpc_server.Screen.cell grid = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->grid_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->grid(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional int32 level = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 score = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

    // optional int32 highScore = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->highscore());
    }

    // optional int32 gold = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gold());
    }

    // optional int32 obstacles = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->obstacles());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Screen::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:examples.grpc_server.Screen)
  GOOGLE_DCHECK_NE(&from, this);
  const Screen* source =
      ::google::protobuf::DynamicCastToGenerated<Screen>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:examples.grpc_server.Screen)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:examples.grpc_server.Screen)
    MergeFrom(*source);
  }
}

void Screen::MergeFrom(const Screen& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:examples.grpc_server.Screen)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  grid_.MergeFrom(from.grid_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00000002u) {
      score_ = from.score_;
    }
    if (cached_has_bits & 0x00000004u) {
      highscore_ = from.highscore_;
    }
    if (cached_has_bits & 0x00000008u) {
      gold_ = from.gold_;
    }
    if (cached_has_bits & 0x00000010u) {
      obstacles_ = from.obstacles_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Screen::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:examples.grpc_server.Screen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Screen::CopyFrom(const Screen& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:examples.grpc_server.Screen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Screen::IsInitialized() const {
  return true;
}

void Screen::Swap(Screen* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Screen::InternalSwap(Screen* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&grid_)->InternalSwap(CastToBase(&other->grid_));
  swap(level_, other->level_);
  swap(score_, other->score_);
  swap(highscore_, other->highscore_);
  swap(gold_, other->gold_);
  swap(obstacles_, other->obstacles_);
}

::google::protobuf::Metadata Screen::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_snake_5fserver_2eproto);
  return ::file_level_metadata_snake_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void EnclaveInput::InitAsDefaultInstance() {
  ::examples::grpc_server::_EnclaveInput_default_instance_._instance.get_mutable()->snake_in_ = const_cast< ::examples::grpc_server::Snake*>(
      ::examples::grpc_server::Snake::internal_default_instance());
  ::examples::grpc_server::_EnclaveInput_default_instance_._instance.get_mutable()->screen_in_ = const_cast< ::examples::grpc_server::Screen*>(
      ::examples::grpc_server::Screen::internal_default_instance());
}
class EnclaveInput::HasBitSetters {
 public:
  static const ::examples::grpc_server::Snake& snake_in(const EnclaveInput* msg);
  static void set_has_snake_in(EnclaveInput* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static const ::examples::grpc_server::Screen& screen_in(const EnclaveInput* msg);
  static void set_has_screen_in(EnclaveInput* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

const ::examples::grpc_server::Snake&
EnclaveInput::HasBitSetters::snake_in(const EnclaveInput* msg) {
  return *msg->snake_in_;
}
const ::examples::grpc_server::Screen&
EnclaveInput::HasBitSetters::screen_in(const EnclaveInput* msg) {
  return *msg->screen_in_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EnclaveInput::kSnakeInFieldNumber;
const int EnclaveInput::kScreenInFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EnclaveInput::EnclaveInput()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:examples.grpc_server.EnclaveInput)
}
EnclaveInput::EnclaveInput(const EnclaveInput& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_snake_in()) {
    snake_in_ = new ::examples::grpc_server::Snake(*from.snake_in_);
  } else {
    snake_in_ = nullptr;
  }
  if (from.has_screen_in()) {
    screen_in_ = new ::examples::grpc_server::Screen(*from.screen_in_);
  } else {
    screen_in_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:examples.grpc_server.EnclaveInput)
}

void EnclaveInput::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_EnclaveInput_snake_5fserver_2eproto.base);
  ::memset(&snake_in_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&screen_in_) -
      reinterpret_cast<char*>(&snake_in_)) + sizeof(screen_in_));
}

EnclaveInput::~EnclaveInput() {
  // @@protoc_insertion_point(destructor:examples.grpc_server.EnclaveInput)
  SharedDtor();
}

void EnclaveInput::SharedDtor() {
  if (this != internal_default_instance()) delete snake_in_;
  if (this != internal_default_instance()) delete screen_in_;
}

void EnclaveInput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnclaveInput& EnclaveInput::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_EnclaveInput_snake_5fserver_2eproto.base);
  return *internal_default_instance();
}


void EnclaveInput::Clear() {
// @@protoc_insertion_point(message_clear_start:examples.grpc_server.EnclaveInput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(snake_in_ != nullptr);
      snake_in_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(screen_in_ != nullptr);
      screen_in_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EnclaveInput::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<EnclaveInput*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .examples.grpc_server.Snake snake_in = 9001;
      case 9001: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::Parse32(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::examples::grpc_server::Snake::_InternalParse;
        object = msg->mutable_snake_in();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        bool ok = ctx->ParseExactRange({parser_till_end, object},
                                       ptr, newend);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
        ptr = newend;
        break;
      }
      // optional .examples.grpc_server.Screen screen_in = 9002;
      case 9002: {
        if (static_cast<::google::protobuf::uint8>(tag) != 82) goto handle_unusual;
        ptr = ::google::protobuf::io::Parse32(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::examples::grpc_server::Screen::_InternalParse;
        object = msg->mutable_screen_in();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        bool ok = ctx->ParseExactRange({parser_till_end, object},
                                       ptr, newend);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
        ptr = newend;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EnclaveInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:examples.grpc_server.EnclaveInput)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(72021u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .examples.grpc_server.Snake snake_in = 9001;
      case 9001: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72010 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_snake_in()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .examples.grpc_server.Screen screen_in = 9002;
      case 9002: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72018 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_screen_in()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:examples.grpc_server.EnclaveInput)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:examples.grpc_server.EnclaveInput)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EnclaveInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:examples.grpc_server.EnclaveInput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .examples.grpc_server.Snake snake_in = 9001;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9001, HasBitSetters::snake_in(this), output);
  }

  // optional .examples.grpc_server.Screen screen_in = 9002;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9002, HasBitSetters::screen_in(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:examples.grpc_server.EnclaveInput)
}

::google::protobuf::uint8* EnclaveInput::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:examples.grpc_server.EnclaveInput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .examples.grpc_server.Snake snake_in = 9001;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9001, HasBitSetters::snake_in(this), target);
  }

  // optional .examples.grpc_server.Screen screen_in = 9002;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9002, HasBitSetters::screen_in(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:examples.grpc_server.EnclaveInput)
  return target;
}

size_t EnclaveInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:examples.grpc_server.EnclaveInput)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .examples.grpc_server.Snake snake_in = 9001;
    if (cached_has_bits & 0x00000001u) {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *snake_in_);
    }

    // optional .examples.grpc_server.Screen screen_in = 9002;
    if (cached_has_bits & 0x00000002u) {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *screen_in_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnclaveInput::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:examples.grpc_server.EnclaveInput)
  GOOGLE_DCHECK_NE(&from, this);
  const EnclaveInput* source =
      ::google::protobuf::DynamicCastToGenerated<EnclaveInput>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:examples.grpc_server.EnclaveInput)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:examples.grpc_server.EnclaveInput)
    MergeFrom(*source);
  }
}

void EnclaveInput::MergeFrom(const EnclaveInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:examples.grpc_server.EnclaveInput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_snake_in()->::examples::grpc_server::Snake::MergeFrom(from.snake_in());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_screen_in()->::examples::grpc_server::Screen::MergeFrom(from.screen_in());
    }
  }
}

void EnclaveInput::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:examples.grpc_server.EnclaveInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnclaveInput::CopyFrom(const EnclaveInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:examples.grpc_server.EnclaveInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnclaveInput::IsInitialized() const {
  return true;
}

void EnclaveInput::Swap(EnclaveInput* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EnclaveInput::InternalSwap(EnclaveInput* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(snake_in_, other->snake_in_);
  swap(screen_in_, other->screen_in_);
}

::google::protobuf::Metadata EnclaveInput::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_snake_5fserver_2eproto);
  return ::file_level_metadata_snake_5fserver_2eproto[kIndexInFileMessages];
}


// ===================================================================

void EnclaveOutput::InitAsDefaultInstance() {
  ::examples::grpc_server::_EnclaveOutput_default_instance_._instance.get_mutable()->snake_out_ = const_cast< ::examples::grpc_server::Snake*>(
      ::examples::grpc_server::Snake::internal_default_instance());
  ::examples::grpc_server::_EnclaveOutput_default_instance_._instance.get_mutable()->screen_out_ = const_cast< ::examples::grpc_server::Screen*>(
      ::examples::grpc_server::Screen::internal_default_instance());
  ::examples::grpc_server::_EnclaveOutput_default_instance_._instance.get_mutable()->ret_ = const_cast< ::examples::grpc_server::ReturnValue*>(
      ::examples::grpc_server::ReturnValue::internal_default_instance());
}
class EnclaveOutput::HasBitSetters {
 public:
  static const ::examples::grpc_server::Snake& snake_out(const EnclaveOutput* msg);
  static void set_has_snake_out(EnclaveOutput* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static const ::examples::grpc_server::Screen& screen_out(const EnclaveOutput* msg);
  static void set_has_screen_out(EnclaveOutput* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static const ::examples::grpc_server::ReturnValue& ret(const EnclaveOutput* msg);
  static void set_has_ret(EnclaveOutput* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

const ::examples::grpc_server::Snake&
EnclaveOutput::HasBitSetters::snake_out(const EnclaveOutput* msg) {
  return *msg->snake_out_;
}
const ::examples::grpc_server::Screen&
EnclaveOutput::HasBitSetters::screen_out(const EnclaveOutput* msg) {
  return *msg->screen_out_;
}
const ::examples::grpc_server::ReturnValue&
EnclaveOutput::HasBitSetters::ret(const EnclaveOutput* msg) {
  return *msg->ret_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EnclaveOutput::kSnakeOutFieldNumber;
const int EnclaveOutput::kScreenOutFieldNumber;
const int EnclaveOutput::kRetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EnclaveOutput::EnclaveOutput()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:examples.grpc_server.EnclaveOutput)
}
EnclaveOutput::EnclaveOutput(const EnclaveOutput& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_snake_out()) {
    snake_out_ = new ::examples::grpc_server::Snake(*from.snake_out_);
  } else {
    snake_out_ = nullptr;
  }
  if (from.has_screen_out()) {
    screen_out_ = new ::examples::grpc_server::Screen(*from.screen_out_);
  } else {
    screen_out_ = nullptr;
  }
  if (from.has_ret()) {
    ret_ = new ::examples::grpc_server::ReturnValue(*from.ret_);
  } else {
    ret_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:examples.grpc_server.EnclaveOutput)
}

void EnclaveOutput::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_EnclaveOutput_snake_5fserver_2eproto.base);
  ::memset(&snake_out_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&snake_out_)) + sizeof(ret_));
}

EnclaveOutput::~EnclaveOutput() {
  // @@protoc_insertion_point(destructor:examples.grpc_server.EnclaveOutput)
  SharedDtor();
}

void EnclaveOutput::SharedDtor() {
  if (this != internal_default_instance()) delete snake_out_;
  if (this != internal_default_instance()) delete screen_out_;
  if (this != internal_default_instance()) delete ret_;
}

void EnclaveOutput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnclaveOutput& EnclaveOutput::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_EnclaveOutput_snake_5fserver_2eproto.base);
  return *internal_default_instance();
}


void EnclaveOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:examples.grpc_server.EnclaveOutput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(snake_out_ != nullptr);
      snake_out_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(screen_out_ != nullptr);
      screen_out_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(ret_ != nullptr);
      ret_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EnclaveOutput::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<EnclaveOutput*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .examples.grpc_server.Snake snake_out = 9001;
      case 9001: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::Parse32(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::examples::grpc_server::Snake::_InternalParse;
        object = msg->mutable_snake_out();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        bool ok = ctx->ParseExactRange({parser_till_end, object},
                                       ptr, newend);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
        ptr = newend;
        break;
      }
      // optional .examples.grpc_server.Screen screen_out = 9002;
      case 9002: {
        if (static_cast<::google::protobuf::uint8>(tag) != 82) goto handle_unusual;
        ptr = ::google::protobuf::io::Parse32(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::examples::grpc_server::Screen::_InternalParse;
        object = msg->mutable_screen_out();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        bool ok = ctx->ParseExactRange({parser_till_end, object},
                                       ptr, newend);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
        ptr = newend;
        break;
      }
      // optional .examples.grpc_server.ReturnValue ret = 9003;
      case 9003: {
        if (static_cast<::google::protobuf::uint8>(tag) != 90) goto handle_unusual;
        ptr = ::google::protobuf::io::Parse32(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::examples::grpc_server::ReturnValue::_InternalParse;
        object = msg->mutable_ret();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        bool ok = ctx->ParseExactRange({parser_till_end, object},
                                       ptr, newend);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
        ptr = newend;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EnclaveOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:examples.grpc_server.EnclaveOutput)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(72029u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .examples.grpc_server.Snake snake_out = 9001;
      case 9001: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72010 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_snake_out()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .examples.grpc_server.Screen screen_out = 9002;
      case 9002: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72018 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_screen_out()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .examples.grpc_server.ReturnValue ret = 9003;
      case 9003: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72026 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ret()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:examples.grpc_server.EnclaveOutput)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:examples.grpc_server.EnclaveOutput)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EnclaveOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:examples.grpc_server.EnclaveOutput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .examples.grpc_server.Snake snake_out = 9001;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9001, HasBitSetters::snake_out(this), output);
  }

  // optional .examples.grpc_server.Screen screen_out = 9002;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9002, HasBitSetters::screen_out(this), output);
  }

  // optional .examples.grpc_server.ReturnValue ret = 9003;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9003, HasBitSetters::ret(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:examples.grpc_server.EnclaveOutput)
}

::google::protobuf::uint8* EnclaveOutput::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:examples.grpc_server.EnclaveOutput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .examples.grpc_server.Snake snake_out = 9001;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9001, HasBitSetters::snake_out(this), target);
  }

  // optional .examples.grpc_server.Screen screen_out = 9002;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9002, HasBitSetters::screen_out(this), target);
  }

  // optional .examples.grpc_server.ReturnValue ret = 9003;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9003, HasBitSetters::ret(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:examples.grpc_server.EnclaveOutput)
  return target;
}

size_t EnclaveOutput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:examples.grpc_server.EnclaveOutput)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .examples.grpc_server.Snake snake_out = 9001;
    if (cached_has_bits & 0x00000001u) {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *snake_out_);
    }

    // optional .examples.grpc_server.Screen screen_out = 9002;
    if (cached_has_bits & 0x00000002u) {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *screen_out_);
    }

    // optional .examples.grpc_server.ReturnValue ret = 9003;
    if (cached_has_bits & 0x00000004u) {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *ret_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnclaveOutput::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:examples.grpc_server.EnclaveOutput)
  GOOGLE_DCHECK_NE(&from, this);
  const EnclaveOutput* source =
      ::google::protobuf::DynamicCastToGenerated<EnclaveOutput>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:examples.grpc_server.EnclaveOutput)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:examples.grpc_server.EnclaveOutput)
    MergeFrom(*source);
  }
}

void EnclaveOutput::MergeFrom(const EnclaveOutput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:examples.grpc_server.EnclaveOutput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_snake_out()->::examples::grpc_server::Snake::MergeFrom(from.snake_out());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_screen_out()->::examples::grpc_server::Screen::MergeFrom(from.screen_out());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_ret()->::examples::grpc_server::ReturnValue::MergeFrom(from.ret());
    }
  }
}

void EnclaveOutput::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:examples.grpc_server.EnclaveOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnclaveOutput::CopyFrom(const EnclaveOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:examples.grpc_server.EnclaveOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnclaveOutput::IsInitialized() const {
  return true;
}

void EnclaveOutput::Swap(EnclaveOutput* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EnclaveOutput::InternalSwap(EnclaveOutput* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(snake_out_, other->snake_out_);
  swap(screen_out_, other->screen_out_);
  swap(ret_, other->ret_);
}

::google::protobuf::Metadata EnclaveOutput::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_snake_5fserver_2eproto);
  return ::file_level_metadata_snake_5fserver_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace grpc_server
}  // namespace examples
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::examples::grpc_server::ReturnValue* Arena::CreateMaybeMessage< ::examples::grpc_server::ReturnValue >(Arena* arena) {
  return Arena::CreateInternal< ::examples::grpc_server::ReturnValue >(arena);
}
template<> PROTOBUF_NOINLINE ::examples::grpc_server::SnakeSegment* Arena::CreateMaybeMessage< ::examples::grpc_server::SnakeSegment >(Arena* arena) {
  return Arena::CreateInternal< ::examples::grpc_server::SnakeSegment >(arena);
}
template<> PROTOBUF_NOINLINE ::examples::grpc_server::Snake* Arena::CreateMaybeMessage< ::examples::grpc_server::Snake >(Arena* arena) {
  return Arena::CreateInternal< ::examples::grpc_server::Snake >(arena);
}
template<> PROTOBUF_NOINLINE ::examples::grpc_server::Screen_cell* Arena::CreateMaybeMessage< ::examples::grpc_server::Screen_cell >(Arena* arena) {
  return Arena::CreateInternal< ::examples::grpc_server::Screen_cell >(arena);
}
template<> PROTOBUF_NOINLINE ::examples::grpc_server::Screen* Arena::CreateMaybeMessage< ::examples::grpc_server::Screen >(Arena* arena) {
  return Arena::CreateInternal< ::examples::grpc_server::Screen >(arena);
}
template<> PROTOBUF_NOINLINE ::examples::grpc_server::EnclaveInput* Arena::CreateMaybeMessage< ::examples::grpc_server::EnclaveInput >(Arena* arena) {
  return Arena::CreateInternal< ::examples::grpc_server::EnclaveInput >(arena);
}
template<> PROTOBUF_NOINLINE ::examples::grpc_server::EnclaveOutput* Arena::CreateMaybeMessage< ::examples::grpc_server::EnclaveOutput >(Arena* arena) {
  return Arena::CreateInternal< ::examples::grpc_server::EnclaveOutput >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
